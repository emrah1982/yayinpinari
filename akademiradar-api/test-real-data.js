// Ger√ßek API verilerinin kullanƒ±lƒ±p kullanƒ±lmadƒ±ƒüƒ±nƒ± test et
const fetch = require('node-fetch');

async function testRealDataUsage() {
    console.log('üß™ Testing Real API Data Usage - "yapay zeka" query\n');
    
    try {
        console.log('üìä Calling comprehensive analysis...');
        const response = await fetch('http://localhost:5000/api/trend-analysis/comprehensive', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                query: 'yapay zeka',
                startYear: 2019,
                endYear: 2025,
                includeProjects: true,
                includeFunding: true,
                includeCitations: true
            })
        });

        if (!response.ok) {
            console.error('‚ùå API Error:', response.status, response.statusText);
            return;
        }

        const result = await response.json();
        console.log('‚úÖ API Response received\n');
        
        if (result.success && result.data) {
            console.log('üîç DATA SOURCE ANALYSIS:');
            console.log('========================');
            
            // Veri kaynaklarƒ± kontrol√º
            console.log('üìã Sources:', result.data.sources);
            const hasRealData = result.data.sources.includes('Real Citation Data');
            const hasMockData = result.data.sources.includes('Mock Data (Demo)');
            
            console.log('\nüéØ REAL DATA STATUS:');
            console.log('- Real Citation Data:', hasRealData ? '‚úÖ ACTIVE' : '‚ùå NOT FOUND');
            console.log('- Mock Data:', hasMockData ? '‚ö†Ô∏è FALLBACK ACTIVE' : '‚úÖ NOT USED');
            
            // Metrikleri kontrol et
            console.log('\nüìä KEY METRICS:');
            console.log('- Total Publications:', result.data.summary?.totalPublications || 'N/A');
            console.log('- Growth Rate:', result.data.summary?.growthRate || 'N/A', '%');
            console.log('- Total Citations:', result.data.summary?.totalCitations || 'N/A');
            
            // Yƒ±llƒ±k veri kontrol√º
            if (result.data.yearlyData) {
                const years = Object.keys(result.data.yearlyData);
                console.log('\nüìà YEARLY DATA:');
                console.log('- Years available:', years.length);
                console.log('- Year range:', years);
                
                if (years.length > 0) {
                    const sampleYear = years[0];
                    const sampleData = result.data.yearlyData[sampleYear];
                    console.log(`- Sample (${sampleYear}):`, sampleData);
                }
            }
            
            // Sonu√ß deƒüerlendirmesi
            console.log('\nüèÜ EVALUATION:');
            if (hasRealData && !hasMockData) {
                console.log('‚úÖ SUCCESS: Using REAL API data only!');
            } else if (hasRealData && hasMockData) {
                console.log('‚ö†Ô∏è MIXED: Using both real and mock data');
            } else if (hasMockData) {
                console.log('‚ùå FALLBACK: Using mock data only');
            } else {
                console.log('‚ùì UNKNOWN: No clear data source identified');
            }
            
        } else {
            console.log('‚ùå No data in API response');
            console.log('Full response:', result);
        }

    } catch (error) {
        console.error('‚ùå Test error:', error.message);
    }
}

testRealDataUsage();
